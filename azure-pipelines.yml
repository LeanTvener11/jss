# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
    - master
    - dev
    - release/*
  paths:
    include:
    - /

# should trigger builds for PRs targeting any of the listed branches
pr:
  branches:
    include:
    - master
    - dev
    - release/*
  paths:
    include:
    - /

pool:
  vmImage: 'ubuntu-latest'

variables:
  TestSourceBranch: $[ variables['Build.SourceBranch'] ]
  TestTargetBranch: 'dev'
  shouldPublish: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))]
  ${{ if startsWith(variables['TestSourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
    branchToCompare: $[variables['Build.SourceBranch']]
  ${{ if startsWith(variables['TestSourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
    branchToCompare: $[variables['System.PullRequest.TargetBranch']]

# Some steps here scaffold jss apps and check if they build and lint correctly
# For performance reasons we try to limit the number of packages being built and linted to those that were changed in current branch
# We use --since param from that to compare current branch to the target - and get only the changes that get pulled
# We ignore nextjs apps in build command for now - nextjs needs to connect to Sitecore app to be built properly at the moment.
# create-sitecore-jss gets ignored for lint as it fails with 'The command line is too long.' error.

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
- script: |
    yarn cache clean --all && yarn install --immutable
  displayName: 'yarn install - initial'
- script: |
    yarn build
  displayName: 'build packages'
- script: |
    yarn coverage-packages
  displayName: 'running tests'
  env: {
    testEnv: 'ci'
  }
- script: |
    lerna run scaffold-apps
  displayName: 'scaffold apps'
- script: |
    yarn install
  displayName: 'yarn install - refresh'
- script: |
    lerna run lint --ignore create-sitecore-jss --since $(branchToCompare) -- --fix
  displayName: 'lint apps - updated only'
- script: |
    lerna run build --ignore sample-nextjs-* --since $(branchToCompare) --include-dependencies
  displayName: 'build apps - updated only'

  #
  # LERNA VERSION
  # * Configure git with a commit user
  # * Update git remote to include a Personal Access Token, so lerna can push
  # * Explicitly check out the current branch since Pipelines will use disconnected HEAD by default
  # * Increment pre-release version
  #     * Force version update even if lerna doesn't detect changes
  #     * Include [skip ci] in commit message to stop pipeline from triggering again when lerna pushes
  # * Only run for 'dev' branch
  #
- script: |
    git config user.email builds@sitecore.com
    git config user.name "Automated Build"
    git remote set-url origin https://$GITHUB_PAT_ENV@github.com/Sitecore/jss.git
    git checkout $(branchName)
    $(npm bin)/lerna version prerelease --preid canary --force-publish --message "version %s [skip ci]" --yes
  displayName: 'pre-release version update'
  condition: and(succeeded(), eq(variables.shouldPublish, true))
  env:
    GITHUB_PAT_ENV: $(GITHUB-PAT)
    YARN_ENABLE_IMMUTABLE_INSTALLS: false
  #
  # LERNA PUBLISH
  # * Configure npm to use the provided access token, so lerna can publish
  # * Do a lerna canary publish of the version we've already updated and pushed
  # * Disable access verification (no-verify-access) as this doesn't seem to work behind Azure DevOps' npm proxy
  #     * https://github.com/lerna/lerna/issues/1685
  # * Only run for 'dev' branch
  #
- script: |
    echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
    $(npm bin)/lerna publish from-git --canary --pre-dist-tag canary --preid canary --no-verify-access --yes
    yarn install --no-immutable --mode=update-lockfile
    git add yarn.lock
    git commit -m "update yarn.lock [skip ci]"
    git push
  displayName: 'pre-release canary publish'
  condition: and(succeeded(), eq(variables.shouldPublish, true))
  env:
    NPM_TOKEN: $(NPM-TOKEN)
